/***********************************************************
This procedure is generated by the query 78 template
in TPC-DS. This query is to report the top customer & item 
combinations having the highest ratio of store channel sales 
to all other channel sales (minimum 2 to 1 ratio), for 
combinations with at least one store sale and one other 
channel sale, and to order the output by highest ratio.
The detail steps for generating the procedure with loops
by transforming CTE query are as follows. CTE table
variable is _year.
Then, for each scalar parameter that is used in the query
template, the loop, which calculates the query iteratively for
every range of parameter, is inserted. For the experiments
using the benchmark procedures, we created three databases
with different sizes: 10 GB, 50 GB, and 100 GB. Then, we
observed the scalability of the proposed algorithm using
these different database sizes. In addition, we show that the
performance of the algorithm varies according to the table
statistics, even for the same procedure.
***********************************************************/

create procedure "TPC10_78" (in yearInfo integer)
as begin
declare _year integer;
_year := :yearInfo;

ws =
  (select d_year AS ws_sold_year, ws_item_sk,
    ws_bill_customer_sk ws_customer_sk,
    sum(ws_quantity) ws_qty,
    sum(ws_wholesale_cost) ws_wc,
    sum(ws_sales_price) ws_sp
   from web_sales
   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
   join date_dim on ws_sold_date_sk = d_date_sk
   where wr_order_number is null
   group by d_year, ws_item_sk, ws_bill_customer_sk
   ) ;
cs = 
  (select d_year AS cs_sold_year, cs_item_sk,
    cs_bill_customer_sk cs_customer_sk,
    sum(cs_quantity) cs_qty,
    sum(cs_wholesale_cost) cs_wc,
    sum(cs_sales_price) cs_sp
   from catalog_sales
   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
   join date_dim on cs_sold_date_sk = d_date_sk
   where cr_order_number is null
   group by d_year, cs_item_sk, cs_bill_customer_sk
   ) ;
ss = 
  (select d_year AS ss_sold_year, ss_item_sk,
    ss_customer_sk,
    sum(ss_quantity) ss_qty,
    sum(ss_wholesale_cost) ss_wc,
    sum(ss_sales_price) ss_sp
   from store_sales
   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
   join date_dim on ss_sold_date_sk = d_date_sk
   where sr_ticket_number is null
   group by d_year, ss_item_sk, ss_customer_sk
   ) ;
   
while (:_year < 2002) DO
	select top 100
	ss_customer_sk,
	round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2) ratio,
	ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
	coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
	coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
	coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
	from :ss
	left join :ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
	left join :cs on (cs_sold_year=ss_sold_year and cs_item_sk=cs_item_sk and cs_customer_sk=ss_customer_sk)
	where coalesce(ws_qty,0)>0 and coalesce(cs_qty, 0)>0 and ss_sold_year= :_year
	order by 
	  ss_customer_sk,
	  ss_qty desc, ss_wc desc, ss_sp desc,
	  other_chan_qty,
	  other_chan_wholesale_cost,
	  other_chan_sales_price,
	  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
	;
	_year = :_year + 1;
end while;
end;
